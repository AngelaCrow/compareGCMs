shiny::runApp()
?rasterVis::levelplot()
library(raster)
?getData
getData
?download.file()
download.file("http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_5ar_ciat_downscaled/rcp4_5/2080s/nimr_hadgem2_ao/30s/nimr_hadgem2_ao_rcp4_5_2080s_bio_30s_r1i1p1_no_tile_asc.zip")
download.file("http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_5ar_ciat_downscaled/rcp4_5/2080s/nimr_hadgem2_ao/30s/nimr_hadgem2_ao_rcp4_5_2080s_bio_30s_r1i1p1_no_tile_asc.zip", destfile = "test.zip")
temp <- tempfile()
download.file("http://gisweb.ciat.cgiar.org/ccafs_climate/files/data/ipcc_5ar_ciat_downscaled/rcp4_5/2080s/nimr_hadgem2_ao/30s/nimr_hadgem2_ao_rcp4_5_2080s_bio_30s_r1i1p1_no_tile_asc.zip",temp)
activity_url <- "http://kenbenoit.net/files/activity.zip"
temp <- tempfile()
download.file(activity_url, te
)
devtools::install_github("ropensci/ccafs")
library(ccafs)
res <- cc_search(file_set = cc_params$file_set$`Delta method IPCC AR4`,
scenario = cc_params$scenario$`SRES B1`,
model = cc_params$model$bccr_bcm2_0,
extent = cc_params$extent$global,
format = cc_params$format$ascii,
period = cc_params$period$`2040s`,
variable = cc_params$variable$Precipitation,
resolution = cc_params$resolution$`10 minutes`)
res
(res <- cc_data_fetch(key = res, progress = FALSE))
res <- cc_data_fetch(key = res, progress = FALSE)
gertwd()
getwd()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(magrittr, dplyr, dtplyr, raster, openxlsx, ccafs, rasterVis, maptools)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(magrittr, dplyr, dtplyr, raster, openxlsx, ccafs, rasterVis, maptools)
year <- c("2050", "2070")    # from a list with 2050, 2070
rcp <- c("RCP 4.5", "RCP 8.5")   # from a list with "RCP 2.6", "RCP 4.5", "RCP 6.0", "RCP 8.5"
my.extent <- extent(-120, -31, -57, 33)
plot(vars[[1]][[1]][[1]][[1]]) # Make a plot of one of the variables to help the drawing
shiny::runApp()
pacman::p_load(magrittr, dplyr, dtplyr, raster, openxlsx, ccafs, rasterVis, maptools, shiny)
?checkboxInput
shiny::runApp()
sessionInfo()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?extent
r1 <- raster(nrow=10, ncol=10)
r1[] <- runif(ncell(r1))
plot(r1)
# after running the following line, click on the map twice
e <- drawExtent()
e
shiny::runApp()
shiny::runApp()
?div
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data(wrld_simpl)
wrld_simpl$NAME
class(wrld_simpl$NAME)
class(as.character(wrld_simpl$NAME))
as.character(wrld_simpl$NAME)
dput(as.character(wrld_simpl$NAME))
mtcars
dput(mtcars)
dput(head(mtcars))
dput(as.character(wrld_simpl$NAME))
as.character(wrld_simpl$NAME)
dput(as.character(wrld_simpl$NAME))
shiny::runApp()
my.extent <- "Peru"
if (class(my.extent) == "character"){
data(wrld_simpl)
my.extent <- wrld_simpl[wrld_simpl$NAME %in% my.extent,] %>%
extent
}
mmy.extent
my.extent
my.extent <- "Argentina"
if (class(my.extent) == "character"){
data(wrld_simpl)
my.extent <- wrld_simpl[wrld_simpl$NAME %in% my.extent,] %>%
extent
}
my.extent
shiny::runApp()
data(wrld_simpl)
plot(wrld_simpl)
drawExtent()
shiny::runApp()
?plotOutput
shiny::runApp()
shiny::runApp()
head(wrld_simpl)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(wrld_simpl)
my.extent <- drawExtent()
plot(crop(wrld_simpl, my.extent))
shiny::runApp()
shiny::runApp()
drawExtent
shiny::runApp()
shiny::runApp()
?isolate
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rcp.equiv <- data.frame(name = c("RCP 2.6", "RCP 4.5", "RCP 6.0", "RCP 8.5"), cod = c(26, 45, 60, 85))
year.equiv <- data.frame(name = c("2050", "2070"), cod = c(50, 70))
all.models <- c("AC", "BC", "CC", "CE", "CN", "GF", "GD", "GS", "HD", "HG", "HE", "IN", "IP", "MI", "MR", "MC", "MP", "MG", "NO")
vars <- list()
for (a in year){
wc.vars.temp3 <- list()
for (x in rcp){
wc.vars.temp2 <- list()
for (m in all.models){
rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(wc.vars)]] <- a
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
all.models <- c("AC", "BC")
year <- c("2050")    # from a list with 2050, 2070
rcp <- c("RCP 4.5", "RCP 8.5")
vars <- list()
for (a in year){
wc.vars.temp3 <- list()
for (x in rcp){
wc.vars.temp2 <- list()
for (m in all.models){
rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(wc.vars)]] <- a
}
vars <- list()
for (a in year){
wc.vars.temp3 <- list()
for (x in rcp){
wc.vars.temp2 <- list()
for (m in all.models){
rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(wc.vars)]] <- a
}
plot(wc.vars.temp)
ensembles <- vars.3    # Ensembles will be stored in this object
for (y in 1:length(vars.3)){        # year
for (r in 1:length(vars.3[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length(selected.bio)){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars.3[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars.3[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble) %>% setNames(paste0("bio_", selected.bio[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
selected.bio <- c(1:5, 12:13)
# Filter selected bios across all the layers
vars.2 <- vars
for(y in 1:length(vars.2)){   # year
for (r in 1:length(vars.2[[y]])){   # rcp
for (g in 1:length(vars.2[[y]][[r]])){   # gcm
vars.2[[y]][[r]][[g]] <- subset(vars.2[[y]][[r]][[g]], subset=paste0("bio_", selected.bio))
}
}
}
if (exists("my.extent")){
vars.3 <- vars.2
for(y in 1:length(vars.3)){
for (r in 1:length(vars.3[[y]])){
for (g in 1:length(vars.3[[y]][[r]])){
vars.3[[y]][[r]][[g]] <- crop(vars.3[[y]][[r]][[g]], my.extent)
}
}
}
}
my.extent
ensembles <- vars.3    # Ensembles will be stored in this object
for (y in 1:length(vars.3)){        # year
for (r in 1:length(vars.3[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length(selected.bio)){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars.3[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars.3[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble) %>% setNames(paste0("bio_", selected.bio[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
comp.table <- data.frame(year = character(), rcp = character(), gcm = character())
comp.table$year <- as.character(comp.table$year); comp.table$rcp <- as.character(comp.table$rcp); comp.table$gcm <- as.character(comp.table$gcm)
for (b in selected.bio){
comp.table$newcol <- numeric(nrow(comp.table))
names(comp.table)[ncol(comp.table)] <- paste0("bio_", b)
}
comp.table.template <- comp.table
comp.table
for(y in 1:length(ensembles)){
for (r in 1:length(ensembles[[y]])){
for (g in 1:length(vars.3[[y]][[r]])){
comp.table.temp <- comp.table.template
comp.table.temp[nrow(comp.table.temp)+1,1] <- names(ensembles)[[y]]    # these lines prepare the data for the gcm info to bind to the table
comp.table.temp[nrow(comp.table.temp),2] <- names(ensembles[[y]])[[r]]
comp.table.temp[nrow(comp.table.temp),3] <- names(vars.3[[y]][[r]])[[g]]
res <- cellStats(abs(vars.3[[y]][[r]][[g]] - ensembles[[y]][[r]]), stat="sum", na.rm=TRUE)  # Calculate the sum of the differences (in absolute value)
comp.table.temp[nrow(comp.table.temp), 4:(3+length(res))] <- res
comp.table <- rbind(comp.table, comp.table.temp)
}
}
}
getData()
getData
drawExtent()
drawExtent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?extent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?getData
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?observeEvent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?runif
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderDataTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
expand.grid(Var1 = c("A", "B"), Var2 = c(1,2,3))
expand.grid(Var1 = c("A", "B"), Var2 = c(1,2,3), Var3 = ("a1", "a2", "a3"))
expand.grid(Var1 = c("A", "B"), Var2 = c(1,2,3), Var3 = c("a1", "a2", "a3"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- readRDS("climatic_variables.rds")
str(a)
names(a)
names(a[1])
names(a[1][1])
names(a[[1]])
names(a[[1]][[1]])
names(a[[1]][[1]][[1]])
plot(a[[1]][[1]][[1]])
names(a[[1]][[1]][[1]])
str(a[[1]][[1]][[1]])
str(a[[1]][[1]][[1]])
(0.5*5)+(0.3*5)+(1.2*0.2)
CMIPStack <- getData('CMIP5', var='bio', res=10, rcp=85, model='AC', year=7)
names(a[[1]][[1]][[1]])
names(a[[1]][[1]][[1]])
str(a[[1]][[1]][[1]])
CMIPStack <- getData('CMIP5', var='bio', res=10, rcp=85, model='AC', year=70)
CMIPStack
names(CMIPStack)
str(a[[1]][[1]][[1]])
str(CMIPStack)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()

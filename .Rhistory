shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderDataTable
shiny::runApp()
shiny::runApp()
?renderTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
pacman::p_load(magrittr, dplyr, dtplyr, raster, openxlsx, ccafs, rasterVis, maptools, shiny)
?mean
shiny::runApp()
shiny::runApp()
vars <- list()
for (a in c("2050")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in ic("BC", "CC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
vars <- list()
for (a in c("2050")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("BC", "CC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
rcp.equiv <- data.frame(name = c("RCP 2.6", "RCP 4.5", "RCP 6.0", "RCP 8.5"), cod = c(26, 45, 60, 85))
year.equiv <- data.frame(name = c("2050", "2070"), cod = c(50, 70))
vars <- list()
for (a in c("2050")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("BC", "CC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
vars <- vars
for(y in 1:length(vars)){   # year
for (r in 1:length(vars[[y]])){   # rcp
for (g in 1:length(vars[[y]][[r]])){   # gcm
vars[[y]][[r]][[g]] <- subset(vars[[y]][[r]][[g]], subset=paste0("bio_", input$selected.bio))
}
}
}
vars <- vars
for(y in 1:length(vars)){   # year
for (r in 1:length(vars[[y]])){   # rcp
for (g in 1:length(vars[[y]][[r]])){   # gcm
vars[[y]][[r]][[g]] <- subset(vars[[y]][[r]][[g]], subset=paste0("bio_",  c(1, 5)))
}
}
}
if (exists("my.extent")){
vars <- vars
for(y in 1:length(vars)){
for (r in 1:length(vars[[y]])){
for (g in 1:length(vars[[y]][[r]])){
vars[[y]][[r]][[g]] <- crop(vars[[y]][[r]][[g]], my.extent)
}
}
}
}
for (y in 1:length(vars)){        # year
for (r in 1:length(vars[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length( c(1, 5))){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble, na.rm = TRUE) %>% setNames(paste0("bio_", input$selected.bio[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
ensembles <- vars    # Ensembles will be stored in this object
for (y in 1:length(vars)){        # year
for (r in 1:length(vars[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length( c(1, 5))){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble, na.rm = TRUE) %>% setNames(paste0("bio_",  c(1, 5)[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
ensembles
plot(ensembles)
class(ensembles)
class(ensembles[[1]])
class(ensembles[[1]][[1]])
plot(ensembles[[1]][[1]])
comp.table <- data.frame(year = character(), rcp = character(), gcm = character())
comp.table$year <- as.character(comp.table$year); comp.table$rcp <- as.character(comp.table$rcp); comp.table$gcm <- as.character(comp.table$gcm)
for (b in  c(1, 5)){
comp.table$newcol <- numeric(nrow(comp.table))
names(comp.table)[ncol(comp.table)] <- paste0("bio_", b)
}
comp.table.template <- comp.table
comp.table
comp.table.template
for(y in 1:length(ensembles)){
for (r in 1:length(ensembles[[y]])){
for (g in 1:length(vars[[y]][[r]])){
comp.table.temp <- comp.table.template
comp.table.temp[nrow(comp.table.temp)+1,1] <- names(ensembles)[[y]]    # these lines prepare the data for the gcm info to bind to the table
comp.table.temp[nrow(comp.table.temp),2] <- names(ensembles[[y]])[[r]]
comp.table.temp[nrow(comp.table.temp),3] <- names(vars[[y]][[r]])[[g]]
res <- cellStats(abs(vars[[y]][[r]][[g]] - ensembles[[y]][[r]]), stat="sum", na.rm=TRUE)  # Calculate the sum of the differences (in absolute value)
comp.table.temp[nrow(comp.table.temp), 4:(3+length(res))] <- res
comp.table <- rbind(comp.table, comp.table.temp)
}
}
}
comp.table
comp.table.temp
normalizeMinMax <- function(x, newMin, newMax){ (x - min(x, na.rm=T))/(max(x, na.rm=T)-min(x, na.rm=T)) * (newMax - newMin) + newMin }
comp.table.norm <- comp.table
for (y in unique(comp.table.norm$year)){
for (r in unique(comp.table.norm$rcp)){
for (b in grep("bio", names(comp.table.norm))){
sc.values <- comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b]
norm.values <- normalizeMinMax(sc.values, 0, 1)
comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b] <- norm.values
}
}
}
comp.table.norm
normalizeMinMax <- function(x, newMin, newMax){ (x - min(x, na.rm=T))/(max(x, na.rm=TRUE)-min(x, na.rm=TRUE)) * (newMax - newMin) + newMin }
comp.table.norm <- comp.table
for (y in unique(comp.table.norm$year)){
for (r in unique(comp.table.norm$rcp)){
for (b in grep("bio", names(comp.table.norm))){
sc.values <- comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b]
norm.values <- normalizeMinMax(sc.values, 0, 1)
comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b] <- norm.values
}
}
}
comp.table.norm
comp.table
unique(comp.table.norm$year)
unique(comp.table.norm$rcp)
grep("bio", names(comp.table.norm))
sc.values
norm.values
m <- matrix(runif(1000), ncol=4)
m_scl <- scale(m)
m_scl
m <- matrix(runif(1000), ncol=4)
m_scl <- scale(m, center = FALSE)
m_scl
summary(m_scl)
normalizeMinMax <- function(x, newMin, newMax){ (x - min(x, na.rm=T))/(max(x, na.rm=TRUE)-min(x, na.rm=TRUE)) * (newMax - newMin) + newMin }
normalizeMinMax(c(1,2,3,4,5,6,7,8))
shiny::runApp()
comp.table
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?getData
getData
.cmip5
shiny::runApp()
?renderDataTable
?round
?renderDataTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
DF <- expand.grid(Year = c(2050, 2070), Models = c("CC", "BC"))
DF$RASTER <- NULL
View(DF)
DF$RASTER <- NA
Library(DiversityOccupancy)
library(DiversityOccupancy)
Birdstack
plot(Birdstack)
DF$RASTER[1] <- Birdstack
rm(DF)
library(XML)
library(XML)
url <- "http://www.worldclim.org/cmip5_10m"
a <-readHTMLTable(url)
a
a[[1]]
a[[1]]$Year <- 2050
a[[2]]$Year <- 2070
Posible <- rbind(a[[1]], a[[2]])
View(Posible)
txt <- Posible[1,4]
txt
gsub(txt, "Yes")
gsub(txt, "Yes", Posible)
View(gsub(txt, "Yes", Posible))
View(gsub(as.character(txt), "Yes", Posible))
gsub(as.character(txt), "Yes", Posible)
as.character(txt)
as.character(Posible)
txt <- as.character(Posible[1,4])
txt
Posible <- rbind(a[[1]], a[[2]])
txt <- as.character(Posible[1,4])
for (i in c(3:6)){
Posible[,i] <- as.character(Posible[,i])
Posible[,i] <- gsub(txt, "Yes", Posible[,i])
}
Posible
View(Posible)
saveRDS(Posible, "Possible.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(XML)
url <- "http://www.worldclim.org/cmip5_10m"
a <-readHTMLTable(url)
a[[1]]
a[[2]]
identical(a[[1]], a[[2]])
Posible <- a[[1]]
txt <- as.character(Posible[1,4])
for (i in c(3:6)){
Posible[,i] <- as.character(Posible[,i])
Posible[,i] <- gsub(txt, "Yes", Posible[,i])
}
View(Posible)
saveRDS(Posible, "Possible.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabsetPanel
shiny::runApp()
shiny::runApp()
nTabs = 4
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
nTabs = 4
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
nTabs = 4
myTabs = lapply(paste('Tab', 1: nTabs), tabPanel)
do.call(tabsetPanel, myTabs)
nTabs = 4
myTabs = lapply(paste('Bio', c(1,4,6)), tabPanel)
do.call(tabsetPanel, myTabs)
myTabs
nTabs = 4
myTabs = lapply(paste('Bio', c(1,4,6)), tabPanel)
a <- do.call(tabsetPanel, myTabs)
a
do.call(tabsetPanel, a,a,a)
do.call(tabsetPanel, list(a,a,a))
shiny::runApp()
lapply(paste('Year', input$year), tabPanel)
lapply(paste('Year', c(2050, 2070)), tabPanel)
a <- do.call(tabsetPanel, myTabs)
a
tabPanel(a)
tabPanel
?tabPanel
a
shiny::runApp()
lapply(paste('Bio', input$selected.bio), tabPanel)
myTabs = lapply(paste('Bio', c(1,3,6)), tabPanel)
myTavs
myTabs
a <- do.call(tabsetPanel, myTabs)
a
b <- do.call(tabsetPanel, list(rep(a, times = 2)))
b
paste('Year', input$year)
paste('Year', c(1,2,3,4))
?renderUI
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- readRDS("climatic_variables.rds")
a
rm(a)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(magrittr)
library(dplyr)
library(raster)
library(ccafs)
library(rasterVis)
library(maptools)
library(shiny)
library(rgeos)
library(sp)
data(wrld_simpl)
rcp.equiv <- data.frame(name = c("RCP 2.6", "RCP 4.5", "RCP 6.0", "RCP 8.5"), cod = c(26, 45, 60, 85))
year.equiv <- data.frame(name = c("2050", "2070"), cod = c(50, 70))
vars <- list()
for (a in c("2050", "2070")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("AC", "BC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
str(vars)
str(vars[1])
names(vars)
names(vars[["2050"]])
vars[["2050"]][["RCp 4.5"]]
vars[["2050"]][["RCP 4.5"]]
str(vars[["2050"]][["RCP 4.5"]])
names(vars[["2050"]][["RCP 4.5"]])
names(vars[["2050"]][["RCP 4.5"]][["AC"]])
class(vars[["2050"]][["RCP 4.5"]][["AC"]])
MODS <- expand.grid(years = c("2050", "2070"), rcp = c("RCP 4.5"), models = c("AC", "BC"))
MODS
MODS$ID <- 1:length(MODS)
MODS$ID <- 1:NROW(MODS)
MODS
MODS <- expand.grid(years = c("2050", "2070"), rcp = c("RCP 4.5"), models = c("AC", "BC"))
MODS$ID <- 1:NROW(MODS)
MODS
system.time()
system.time(
vars <- list()
for (a in c("2050", "2070")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("AC", "BC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
})
vars <- list()
for (a in c("2050", "2070")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("AC", "BC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
Sys.time()
?system.time
Sys.time(1+24)
system.time(1+24)
system.time(rnorm(1000))
system.time(
vars <- list()
for (a in c("2050", "2070")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("AC", "BC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
})
system.time(for(i in 1:100) mad(runif(1000)))
rcp.equiv
MODS
year.equiv
MODS
shiny::runApp()
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
extent(-180, 180, -90, 90)
shiny::runApp()

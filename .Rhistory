shiny::runApp()
shiny::runApp()
?isolate
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rcp.equiv <- data.frame(name = c("RCP 2.6", "RCP 4.5", "RCP 6.0", "RCP 8.5"), cod = c(26, 45, 60, 85))
year.equiv <- data.frame(name = c("2050", "2070"), cod = c(50, 70))
all.models <- c("AC", "BC", "CC", "CE", "CN", "GF", "GD", "GS", "HD", "HG", "HE", "IN", "IP", "MI", "MR", "MC", "MP", "MG", "NO")
vars <- list()
for (a in year){
wc.vars.temp3 <- list()
for (x in rcp){
wc.vars.temp2 <- list()
for (m in all.models){
rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(wc.vars)]] <- a
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
all.models <- c("AC", "BC")
year <- c("2050")    # from a list with 2050, 2070
rcp <- c("RCP 4.5", "RCP 8.5")
vars <- list()
for (a in year){
wc.vars.temp3 <- list()
for (x in rcp){
wc.vars.temp2 <- list()
for (m in all.models){
rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(wc.vars)]] <- a
}
vars <- list()
for (a in year){
wc.vars.temp3 <- list()
for (x in rcp){
wc.vars.temp2 <- list()
for (m in all.models){
rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(wc.vars)]] <- a
}
plot(wc.vars.temp)
ensembles <- vars.3    # Ensembles will be stored in this object
for (y in 1:length(vars.3)){        # year
for (r in 1:length(vars.3[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length(selected.bio)){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars.3[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars.3[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble) %>% setNames(paste0("bio_", selected.bio[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
selected.bio <- c(1:5, 12:13)
# Filter selected bios across all the layers
vars.2 <- vars
for(y in 1:length(vars.2)){   # year
for (r in 1:length(vars.2[[y]])){   # rcp
for (g in 1:length(vars.2[[y]][[r]])){   # gcm
vars.2[[y]][[r]][[g]] <- subset(vars.2[[y]][[r]][[g]], subset=paste0("bio_", selected.bio))
}
}
}
if (exists("my.extent")){
vars.3 <- vars.2
for(y in 1:length(vars.3)){
for (r in 1:length(vars.3[[y]])){
for (g in 1:length(vars.3[[y]][[r]])){
vars.3[[y]][[r]][[g]] <- crop(vars.3[[y]][[r]][[g]], my.extent)
}
}
}
}
my.extent
ensembles <- vars.3    # Ensembles will be stored in this object
for (y in 1:length(vars.3)){        # year
for (r in 1:length(vars.3[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length(selected.bio)){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars.3[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars.3[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble) %>% setNames(paste0("bio_", selected.bio[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
comp.table <- data.frame(year = character(), rcp = character(), gcm = character())
comp.table$year <- as.character(comp.table$year); comp.table$rcp <- as.character(comp.table$rcp); comp.table$gcm <- as.character(comp.table$gcm)
for (b in selected.bio){
comp.table$newcol <- numeric(nrow(comp.table))
names(comp.table)[ncol(comp.table)] <- paste0("bio_", b)
}
comp.table.template <- comp.table
comp.table
for(y in 1:length(ensembles)){
for (r in 1:length(ensembles[[y]])){
for (g in 1:length(vars.3[[y]][[r]])){
comp.table.temp <- comp.table.template
comp.table.temp[nrow(comp.table.temp)+1,1] <- names(ensembles)[[y]]    # these lines prepare the data for the gcm info to bind to the table
comp.table.temp[nrow(comp.table.temp),2] <- names(ensembles[[y]])[[r]]
comp.table.temp[nrow(comp.table.temp),3] <- names(vars.3[[y]][[r]])[[g]]
res <- cellStats(abs(vars.3[[y]][[r]][[g]] - ensembles[[y]][[r]]), stat="sum", na.rm=TRUE)  # Calculate the sum of the differences (in absolute value)
comp.table.temp[nrow(comp.table.temp), 4:(3+length(res))] <- res
comp.table <- rbind(comp.table, comp.table.temp)
}
}
}
getData()
getData
drawExtent()
drawExtent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?extent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?getData
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?observeEvent
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?runif
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderDataTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
expand.grid(Var1 = c("A", "B"), Var2 = c(1,2,3))
expand.grid(Var1 = c("A", "B"), Var2 = c(1,2,3), Var3 = ("a1", "a2", "a3"))
expand.grid(Var1 = c("A", "B"), Var2 = c(1,2,3), Var3 = c("a1", "a2", "a3"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- readRDS("climatic_variables.rds")
str(a)
names(a)
names(a[1])
names(a[1][1])
names(a[[1]])
names(a[[1]][[1]])
names(a[[1]][[1]][[1]])
plot(a[[1]][[1]][[1]])
names(a[[1]][[1]][[1]])
str(a[[1]][[1]][[1]])
str(a[[1]][[1]][[1]])
(0.5*5)+(0.3*5)+(1.2*0.2)
CMIPStack <- getData('CMIP5', var='bio', res=10, rcp=85, model='AC', year=7)
names(a[[1]][[1]][[1]])
names(a[[1]][[1]][[1]])
str(a[[1]][[1]][[1]])
CMIPStack <- getData('CMIP5', var='bio', res=10, rcp=85, model='AC', year=70)
CMIPStack
names(CMIPStack)
str(a[[1]][[1]][[1]])
str(CMIPStack)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderDataTable
shiny::runApp()
shiny::runApp()
?renderTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
pacman::p_load(magrittr, dplyr, dtplyr, raster, openxlsx, ccafs, rasterVis, maptools, shiny)
?mean
shiny::runApp()
shiny::runApp()
vars <- list()
for (a in c("2050")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in ic("BC", "CC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
vars <- list()
for (a in c("2050")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("BC", "CC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
rcp.equiv <- data.frame(name = c("RCP 2.6", "RCP 4.5", "RCP 6.0", "RCP 8.5"), cod = c(26, 45, 60, 85))
year.equiv <- data.frame(name = c("2050", "2070"), cod = c(50, 70))
vars <- list()
for (a in c("2050")){
wc.vars.temp3 <- list()
for (x in c("RCP 4.5")){
wc.vars.temp2 <- list()
for (m in c("BC", "CC")){
#rm(wc.vars.temp)
wc.vars.temp <- try(getData("CMIP5", var="bio", res=10, rcp=rcp.equiv$cod[rcp.equiv$name == x], year=year.equiv$cod[year.equiv$name == a], model=m))
#if (!is.null(wc.vars.temp)){
if (!inherits(wc.vars.temp, "try-error")){     # Some of the combinations are not available, don't stop if you try to download an unexisting combination
names(wc.vars.temp) <- paste0("bio_", 1:19)
wc.vars.temp2[[length(wc.vars.temp2)+1]] <- wc.vars.temp
names(wc.vars.temp2)[[length(wc.vars.temp2)]] <- m
}
#}
}
wc.vars.temp3[[length(wc.vars.temp3)+1]] <- wc.vars.temp2
names(wc.vars.temp3)[[length(wc.vars.temp3)]] <- x
}
vars[[length(vars)+1]] <- wc.vars.temp3
names(vars)[[length(vars)]] <- a
}
vars <- vars
for(y in 1:length(vars)){   # year
for (r in 1:length(vars[[y]])){   # rcp
for (g in 1:length(vars[[y]][[r]])){   # gcm
vars[[y]][[r]][[g]] <- subset(vars[[y]][[r]][[g]], subset=paste0("bio_", input$selected.bio))
}
}
}
vars <- vars
for(y in 1:length(vars)){   # year
for (r in 1:length(vars[[y]])){   # rcp
for (g in 1:length(vars[[y]][[r]])){   # gcm
vars[[y]][[r]][[g]] <- subset(vars[[y]][[r]][[g]], subset=paste0("bio_",  c(1, 5)))
}
}
}
if (exists("my.extent")){
vars <- vars
for(y in 1:length(vars)){
for (r in 1:length(vars[[y]])){
for (g in 1:length(vars[[y]][[r]])){
vars[[y]][[r]][[g]] <- crop(vars[[y]][[r]][[g]], my.extent)
}
}
}
}
for (y in 1:length(vars)){        # year
for (r in 1:length(vars[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length( c(1, 5))){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble, na.rm = TRUE) %>% setNames(paste0("bio_", input$selected.bio[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
ensembles <- vars    # Ensembles will be stored in this object
for (y in 1:length(vars)){        # year
for (r in 1:length(vars[[y]])){        # rcp
bio.sub.ensemble <- stack()
for (b in 1:length( c(1, 5))){         # for every bio-variable
gcm.sub.ensemble <- stack()
for (g in 1:length(vars[[y]][[r]])){      # across gcms
gcm.sub.ensemble <- stack(gcm.sub.ensemble, vars[[y]][[r]][[g]][[b]])
}
# Calculate the mean across gcms
bio.sub.ensemble <- stack(bio.sub.ensemble, mean(gcm.sub.ensemble, na.rm = TRUE) %>% setNames(paste0("bio_",  c(1, 5)[b])))
}
ensembles[[y]][[r]] <- bio.sub.ensemble    # and store it in "ensembles"
}
}
ensembles
plot(ensembles)
class(ensembles)
class(ensembles[[1]])
class(ensembles[[1]][[1]])
plot(ensembles[[1]][[1]])
comp.table <- data.frame(year = character(), rcp = character(), gcm = character())
comp.table$year <- as.character(comp.table$year); comp.table$rcp <- as.character(comp.table$rcp); comp.table$gcm <- as.character(comp.table$gcm)
for (b in  c(1, 5)){
comp.table$newcol <- numeric(nrow(comp.table))
names(comp.table)[ncol(comp.table)] <- paste0("bio_", b)
}
comp.table.template <- comp.table
comp.table
comp.table.template
for(y in 1:length(ensembles)){
for (r in 1:length(ensembles[[y]])){
for (g in 1:length(vars[[y]][[r]])){
comp.table.temp <- comp.table.template
comp.table.temp[nrow(comp.table.temp)+1,1] <- names(ensembles)[[y]]    # these lines prepare the data for the gcm info to bind to the table
comp.table.temp[nrow(comp.table.temp),2] <- names(ensembles[[y]])[[r]]
comp.table.temp[nrow(comp.table.temp),3] <- names(vars[[y]][[r]])[[g]]
res <- cellStats(abs(vars[[y]][[r]][[g]] - ensembles[[y]][[r]]), stat="sum", na.rm=TRUE)  # Calculate the sum of the differences (in absolute value)
comp.table.temp[nrow(comp.table.temp), 4:(3+length(res))] <- res
comp.table <- rbind(comp.table, comp.table.temp)
}
}
}
comp.table
comp.table.temp
normalizeMinMax <- function(x, newMin, newMax){ (x - min(x, na.rm=T))/(max(x, na.rm=T)-min(x, na.rm=T)) * (newMax - newMin) + newMin }
comp.table.norm <- comp.table
for (y in unique(comp.table.norm$year)){
for (r in unique(comp.table.norm$rcp)){
for (b in grep("bio", names(comp.table.norm))){
sc.values <- comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b]
norm.values <- normalizeMinMax(sc.values, 0, 1)
comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b] <- norm.values
}
}
}
comp.table.norm
normalizeMinMax <- function(x, newMin, newMax){ (x - min(x, na.rm=T))/(max(x, na.rm=TRUE)-min(x, na.rm=TRUE)) * (newMax - newMin) + newMin }
comp.table.norm <- comp.table
for (y in unique(comp.table.norm$year)){
for (r in unique(comp.table.norm$rcp)){
for (b in grep("bio", names(comp.table.norm))){
sc.values <- comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b]
norm.values <- normalizeMinMax(sc.values, 0, 1)
comp.table.norm[(comp.table.norm$year == y & comp.table.norm$rcp == r),b] <- norm.values
}
}
}
comp.table.norm
comp.table
unique(comp.table.norm$year)
unique(comp.table.norm$rcp)
grep("bio", names(comp.table.norm))
sc.values
norm.values
m <- matrix(runif(1000), ncol=4)
m_scl <- scale(m)
m_scl
m <- matrix(runif(1000), ncol=4)
m_scl <- scale(m, center = FALSE)
m_scl
summary(m_scl)
normalizeMinMax <- function(x, newMin, newMax){ (x - min(x, na.rm=T))/(max(x, na.rm=TRUE)-min(x, na.rm=TRUE)) * (newMax - newMin) + newMin }
normalizeMinMax(c(1,2,3,4,5,6,7,8))
shiny::runApp()
comp.table
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?getData
getData
.cmip5
shiny::runApp()
?renderDataTable
?round
?renderDataTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
DF <- expand.grid(Year = c(2050, 2070), Models = c("CC", "BC"))
DF$RASTER <- NULL
View(DF)
DF$RASTER <- NA
Library(DiversityOccupancy)
library(DiversityOccupancy)
Birdstack
plot(Birdstack)
DF$RASTER[1] <- Birdstack
rm(DF)
